import{_ as n,c as a,a as e,o as t}from"./app-CEvnTgAb.js";const l={};function p(i,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="python-爬虫入门-requests-与-re-xpath-实战" tabindex="-1"><a class="header-anchor" href="#python-爬虫入门-requests-与-re-xpath-实战"><span>Python 爬虫入门：requests 与 re/xpath 实战</span></a></h1><h2 id="一、爬虫基础与-requests-库回顾" tabindex="-1"><a class="header-anchor" href="#一、爬虫基础与-requests-库回顾"><span>一、爬虫基础与 requests 库回顾</span></a></h2><h3 id="一-爬虫概述" tabindex="-1"><a class="header-anchor" href="#一-爬虫概述"><span>（一）爬虫概述</span></a></h3><p>爬虫是一种自动获取网页内容的程序，通过模拟浏览器向服务器发送请求，获取网页数据后进行解析和提取。</p><h3 id="二-requests-库基础" tabindex="-1"><a class="header-anchor" href="#二-requests-库基础"><span>（二）requests 库基础</span></a></h3><ol><li><strong>安装</strong>：使用 <code>pip install requests</code> 进行安装。</li><li><strong>发送请求</strong></li></ol><ul><li><strong>GET 请求</strong>：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> requests</span>
<span class="line">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>POST 请求</strong>：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">}</span></span>
<span class="line">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">&#39;https://example.com&#39;</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>响应处理</strong></li></ol><ul><li><strong>状态码</strong>：<code>response.status_code</code> 用于判断请求是否成功。</li><li><strong>内容获取</strong>：<code>response.text</code> 获取文本内容，<code>response.content</code> 获取二进制内容。</li></ul><h2 id="二、正则表达式-re-库" tabindex="-1"><a class="header-anchor" href="#二、正则表达式-re-库"><span>二、正则表达式（re 库）</span></a></h2><h3 id="一-正则表达式基础" tabindex="-1"><a class="header-anchor" href="#一-正则表达式基础"><span>（一）正则表达式基础</span></a></h3><ol><li><strong>字符匹配</strong></li></ol><ul><li><strong>普通字符</strong>：精确匹配对应字符，如 <code>a</code> 匹配字符 <code>a</code>。</li><li><strong>元字符</strong><ul><li><code>.</code>：匹配除换行符以外的任意单个字符。</li><li><code>\\d</code>：匹配任意一个数字，等价于 <code>[0-9]</code>。</li><li><code>\\w</code>：匹配字母、数字、下划线，等价于 <code>[a-zA-Z0-9_]</code>。</li><li><code>\\s</code>：匹配任意空白字符，如空格、制表符、换行符等。</li></ul></li></ul><ol start="2"><li><strong>重复匹配</strong></li></ol><ul><li><code>*</code>：匹配前面的字符 0 次或多次。</li><li><code>+</code>：匹配前面的字符 1 次或多次。</li><li><code>?</code>：匹配前面的字符 0 次或 1 次。</li><li><code>{n}</code>：匹配前面的字符 n 次。</li><li><code>{n,}</code>：匹配前面的字符至少 n 次。</li><li><code>{n,m}</code>：匹配前面的字符 n 到 m 次。</li></ul><ol start="3"><li><strong>边界匹配</strong></li></ol><ul><li><code>^</code>：匹配字符串的开头。</li><li><code>$</code>：匹配字符串的结尾。</li></ul><h3 id="二-re-库的使用" tabindex="-1"><a class="header-anchor" href="#二-re-库的使用"><span>（二）re 库的使用</span></a></h3><ol><li><strong>导入库</strong>：<code>import re</code></li><li><strong>常用函数</strong></li></ol><ul><li><strong>re.search(pattern, string)</strong>：在字符串中搜索匹配正则表达式的第一个位置，返回一个匹配对象。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> re</span>
<span class="line">text <span class="token operator">=</span> <span class="token string">&quot;Hello, 123 World!&quot;</span></span>
<span class="line"><span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>re.findall(pattern, string)</strong>：在字符串中找到所有匹配正则表达式的子串，返回一个列表。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> re</span>
<span class="line">text <span class="token operator">=</span> <span class="token string">&quot;apple 123 banana 456&quot;</span></span>
<span class="line">numbers <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;\\d+&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>re.sub(pattern, repl, string)</strong>：将字符串中匹配正则表达式的部分替换为指定的字符串。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> re</span>
<span class="line">text <span class="token operator">=</span> <span class="token string">&quot;Hello, World!&quot;</span></span>
<span class="line">new_text <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">r&#39;World&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Python&#39;</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_text<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-正则表达式在爬虫中的应用" tabindex="-1"><a class="header-anchor" href="#三-正则表达式在爬虫中的应用"><span>（三）正则表达式在爬虫中的应用</span></a></h3><ol><li><strong>提取链接</strong>：从网页中提取所有的超链接。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> requests</span>
<span class="line"><span class="token keyword">import</span> re</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://example.com&#39;</span></span>
<span class="line">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">html <span class="token operator">=</span> response<span class="token punctuation">.</span>text</span>
<span class="line">links <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;&lt;a href=&quot;(.*?)&quot;&gt;&#39;</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>links<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>提取文本信息</strong>：从网页中提取特定格式的文本，如日期、电话号码等。</li></ol><h2 id="三、xpath-在爬虫中的应用" tabindex="-1"><a class="header-anchor" href="#三、xpath-在爬虫中的应用"><span>三、XPath 在爬虫中的应用</span></a></h2><h3 id="一-xpath-基础" tabindex="-1"><a class="header-anchor" href="#一-xpath-基础"><span>（一）XPath 基础</span></a></h3><ol><li><strong>节点选择</strong></li></ol><ul><li><strong>绝对路径</strong>：从根节点开始逐级指定节点，如 <code>/html/body/div</code>。</li><li><strong>相对路径</strong>：从当前节点开始指定路径，如 <code>div</code> 表示当前节点下的所有 <code>div</code> 子节点。</li></ul><ol start="2"><li><strong>节点关系</strong></li></ol><ul><li><code>//</code>：选取文档中所有符合条件的节点，无论其位置。</li><li><code>/</code>：选取直接子节点。</li><li><code>.</code>：选取当前节点。</li><li><code>..</code>：选取当前节点的父节点。</li></ul><ol start="3"><li><strong>属性选择</strong>：使用 <code>@属性名</code> 选取具有指定属性的节点，如 <code>//a[@href]</code> 选取所有带有 <code>href</code> 属性的 <code>a</code> 标签。</li></ol><h3 id="二-lxml-库的使用" tabindex="-1"><a class="header-anchor" href="#二-lxml-库的使用"><span>（二）lxml 库的使用</span></a></h3><ol><li><strong>安装</strong>：使用 <code>pip install lxml</code> 进行安装。</li><li><strong>解析 HTML</strong></li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree</span>
<span class="line"><span class="token keyword">import</span> requests</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://example.com&#39;</span></span>
<span class="line">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span></span>
<span class="line">html <span class="token operator">=</span> response<span class="token punctuation">.</span>text</span>
<span class="line">tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>XPath 提取数据</strong></li></ol><ul><li><strong>提取单个节点</strong>：<code>tree.xpath(&#39;xpath表达式&#39;)</code> 返回一个列表，若有匹配结果，第一个元素即为匹配的节点。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">title <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//title/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>提取多个节点</strong>：可以使用循环遍历提取多个匹配节点的数据。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">links <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//a/@href&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> link <span class="token keyword">in</span> links<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-xpath-的应用场景" tabindex="-1"><a class="header-anchor" href="#三-xpath-的应用场景"><span>（三）XPath 的应用场景</span></a></h3><ol><li><strong>结构化数据提取</strong>：从网页中提取表格数据、列表数据等结构化信息。</li><li><strong>复杂页面解析</strong>：对于具有复杂嵌套结构的网页，XPath 可以更准确地定位和提取所需数据。</li></ol><h2 id="四、实战案例" tabindex="-1"><a class="header-anchor" href="#四、实战案例"><span>四、实战案例</span></a></h2><h3 id="一-爬取豆瓣电影-top250-信息" tabindex="-1"><a class="header-anchor" href="#一-爬取豆瓣电影-top250-信息"><span>（一）爬取豆瓣电影 Top250 信息</span></a></h3><ol><li><strong>需求分析</strong>：获取电影名称、评分、简介等信息。</li><li><strong>代码实现</strong></li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> requests</span>
<span class="line"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://movie.douban.com/top250&#39;</span></span>
<span class="line">headers <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span></span>
<span class="line">html <span class="token operator">=</span> response<span class="token punctuation">.</span>text</span>
<span class="line">tree <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>html<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">movies <span class="token operator">=</span> tree<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;//div[@class=&quot;item&quot;]&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> movie <span class="token keyword">in</span> movies<span class="token punctuation">:</span></span>
<span class="line">    title <span class="token operator">=</span> movie<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;.//span[@class=&quot;title&quot;]/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    rating <span class="token operator">=</span> movie<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;.//span[@class=&quot;rating_num&quot;]/text()&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    quote <span class="token operator">=</span> movie<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">&#39;.//span[@class=&quot;inq&quot;]/text()&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> quote<span class="token punctuation">:</span></span>
<span class="line">        quote <span class="token operator">=</span> quote<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token keyword">else</span><span class="token punctuation">:</span></span>
<span class="line">        quote <span class="token operator">=</span> <span class="token string">&#39;暂无简介&#39;</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;电影名称: </span><span class="token interpolation"><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span><span class="token string">，评分: </span><span class="token interpolation"><span class="token punctuation">{</span>rating<span class="token punctuation">}</span></span><span class="token string">，简介: </span><span class="token interpolation"><span class="token punctuation">{</span>quote<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-爬取新闻网站文章标题和链接" tabindex="-1"><a class="header-anchor" href="#二-爬取新闻网站文章标题和链接"><span>（二）爬取新闻网站文章标题和链接</span></a></h3><ol><li><strong>需求分析</strong>：获取新闻网站上的文章标题和对应的链接。</li><li><strong>代码实现</strong></li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> requests</span>
<span class="line"><span class="token keyword">import</span> re</span>
<span class="line"></span>
<span class="line">url <span class="token operator">=</span> <span class="token string">&#39;https://news.example.com&#39;</span></span>
<span class="line">headers <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&#39;User-Agent&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&#39;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span></span>
<span class="line">html <span class="token operator">=</span> response<span class="token punctuation">.</span>text</span>
<span class="line"></span>
<span class="line">titles <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r&#39;&lt;a href=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#39;</span><span class="token punctuation">,</span> html<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">for</span> link<span class="token punctuation">,</span> title <span class="token keyword">in</span> titles<span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&#39;标题: </span><span class="token interpolation"><span class="token punctuation">{</span>title<span class="token punctuation">}</span></span><span class="token string">，链接: </span><span class="token interpolation"><span class="token punctuation">{</span>link<span class="token punctuation">}</span></span><span class="token string">&#39;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、反爬虫机制与应对策略" tabindex="-1"><a class="header-anchor" href="#五、反爬虫机制与应对策略"><span>五、反爬虫机制与应对策略</span></a></h2><h3 id="一-常见反爬虫机制" tabindex="-1"><a class="header-anchor" href="#一-常见反爬虫机制"><span>（一）常见反爬虫机制</span></a></h3><ol><li><strong>IP 封禁</strong>：服务器检测到同一 IP 频繁请求，会封禁该 IP。</li><li><strong>User-Agent 检测</strong>：检查请求的 User-Agent 是否为合法浏览器。</li><li><strong>验证码</strong>：要求用户输入验证码以证明是人类操作。</li><li><strong>加密数据</strong>：对网页数据进行加密处理，增加解析难度。</li></ol><h3 id="二-应对策略" tabindex="-1"><a class="header-anchor" href="#二-应对策略"><span>（二）应对策略</span></a></h3><ol><li><strong>IP 代理</strong>：使用代理 IP 轮换请求，避免 IP 封禁。</li><li><strong>伪装 User-Agent</strong>：在请求头中设置不同的 User-Agent，模拟不同浏览器或设备。</li><li><strong>验证码识别</strong>：使用第三方验证码识别服务或机器学习模型进行验证码识别。</li><li><strong>数据解密</strong>：分析加密算法，对加密数据进行解密。</li></ol>`,61)]))}const c=n(l,[["render",p]]),r=JSON.parse('{"path":"/tech/py/9.html","title":"Python 爬虫入门：requests 与 re/xpath 实战","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、爬虫基础与 requests 库回顾","slug":"一、爬虫基础与-requests-库回顾","link":"#一、爬虫基础与-requests-库回顾","children":[{"level":3,"title":"（一）爬虫概述","slug":"一-爬虫概述","link":"#一-爬虫概述","children":[]},{"level":3,"title":"（二）requests 库基础","slug":"二-requests-库基础","link":"#二-requests-库基础","children":[]}]},{"level":2,"title":"二、正则表达式（re 库）","slug":"二、正则表达式-re-库","link":"#二、正则表达式-re-库","children":[{"level":3,"title":"（一）正则表达式基础","slug":"一-正则表达式基础","link":"#一-正则表达式基础","children":[]},{"level":3,"title":"（二）re 库的使用","slug":"二-re-库的使用","link":"#二-re-库的使用","children":[]},{"level":3,"title":"（三）正则表达式在爬虫中的应用","slug":"三-正则表达式在爬虫中的应用","link":"#三-正则表达式在爬虫中的应用","children":[]}]},{"level":2,"title":"三、XPath 在爬虫中的应用","slug":"三、xpath-在爬虫中的应用","link":"#三、xpath-在爬虫中的应用","children":[{"level":3,"title":"（一）XPath 基础","slug":"一-xpath-基础","link":"#一-xpath-基础","children":[]},{"level":3,"title":"（二）lxml 库的使用","slug":"二-lxml-库的使用","link":"#二-lxml-库的使用","children":[]},{"level":3,"title":"（三）XPath 的应用场景","slug":"三-xpath-的应用场景","link":"#三-xpath-的应用场景","children":[]}]},{"level":2,"title":"四、实战案例","slug":"四、实战案例","link":"#四、实战案例","children":[{"level":3,"title":"（一）爬取豆瓣电影 Top250 信息","slug":"一-爬取豆瓣电影-top250-信息","link":"#一-爬取豆瓣电影-top250-信息","children":[]},{"level":3,"title":"（二）爬取新闻网站文章标题和链接","slug":"二-爬取新闻网站文章标题和链接","link":"#二-爬取新闻网站文章标题和链接","children":[]}]},{"level":2,"title":"五、反爬虫机制与应对策略","slug":"五、反爬虫机制与应对策略","link":"#五、反爬虫机制与应对策略","children":[{"level":3,"title":"（一）常见反爬虫机制","slug":"一-常见反爬虫机制","link":"#一-常见反爬虫机制","children":[]},{"level":3,"title":"（二）应对策略","slug":"二-应对策略","link":"#二-应对策略","children":[]}]}],"git":{},"filePathRelative":"tech/py/9.md"}');export{c as comp,r as data};
