import{_ as s,c as a,a as e,o as p}from"./app-CClO5Xpl.js";const t={};function l(i,n){return p(),a("div",null,n[0]||(n[0]=[e(`<h1 id="python-函数-定义、调用与参数传递" tabindex="-1"><a class="header-anchor" href="#python-函数-定义、调用与参数传递"><span>Python 函数：定义、调用与参数传递</span></a></h1><h2 id="一、函数定义" tabindex="-1"><a class="header-anchor" href="#一、函数定义"><span>一、函数定义</span></a></h2><h3 id="一-基本语法" tabindex="-1"><a class="header-anchor" href="#一-基本语法"><span>（一）基本语法</span></a></h3><p>在 Python 里，函数定义的基本形式如下：</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">function_name</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;函数文档字符串&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token comment"># 函数体</span></span>
<span class="line">    statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">[</span>expression<span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>def</code>：这是定义函数的关键字。</li><li><code>function_name</code>：即函数名，需遵循 Python 标识符的命名规则。</li><li><code>parameters</code>：是函数的参数，可没有参数，也能有多个参数，参数间用逗号分隔。</li><li><code>&quot;&quot;&quot;函数文档字符串&quot;&quot;&quot;</code>：这是可选的文档字符串，用于对函数功能进行描述。</li><li><code>statement(s)</code>：是函数体，包含了函数要执行的代码。</li><li><code>return</code>：是可选的，用于从函数返回值，若省略则函数默认返回 <code>None</code>。</li></ul><h3 id="二-示例" tabindex="-1"><a class="header-anchor" href="#二-示例"><span>（二）示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;该函数用于向传入的名字打招呼&quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Hello, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、函数调用" tabindex="-1"><a class="header-anchor" href="#二、函数调用"><span>二、函数调用</span></a></h2><h3 id="一-调用方式" tabindex="-1"><a class="header-anchor" href="#一-调用方式"><span>（一）调用方式</span></a></h3><p>定义好函数后，可通过函数名加括号并传入必要参数的方式调用函数。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">greet<span class="token punctuation">(</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="二-返回值处理" tabindex="-1"><a class="header-anchor" href="#二-返回值处理"><span>（二）返回值处理</span></a></h3><p>若函数有返回值，可将其赋值给一个变量。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">add_numbers</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> add_numbers<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、参数传递" tabindex="-1"><a class="header-anchor" href="#三、参数传递"><span>三、参数传递</span></a></h2><h3 id="一-位置参数" tabindex="-1"><a class="header-anchor" href="#一-位置参数"><span>（一）位置参数</span></a></h3><p>位置参数是最常见的参数类型，调用函数时，实参需按照形参的顺序依次传递。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">power</span><span class="token punctuation">(</span>base<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> base <span class="token operator">**</span> exponent</span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> power<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-关键字参数" tabindex="-1"><a class="header-anchor" href="#二-关键字参数"><span>（二）关键字参数</span></a></h3><p>使用关键字参数调用函数时，可通过参数名指定传递的参数，这样就无需遵循参数的顺序。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">result <span class="token operator">=</span> power<span class="token punctuation">(</span>exponent<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> base<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-默认参数" tabindex="-1"><a class="header-anchor" href="#三-默认参数"><span>（三）默认参数</span></a></h3><p>在定义函数时，可为参数设定默认值，若调用函数时未提供该参数的值，则使用默认值。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> greeting<span class="token operator">=</span><span class="token string">&quot;Hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>greeting<span class="token punctuation">}</span></span><span class="token string">, </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">!&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">greet<span class="token punctuation">(</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">)</span></span>
<span class="line">greet<span class="token punctuation">(</span><span class="token string">&quot;Charlie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-可变参数" tabindex="-1"><a class="header-anchor" href="#四-可变参数"><span>（四）可变参数</span></a></h3><ol><li><strong><code>*args</code></strong><code>*args</code> 用于接收任意数量的位置参数，这些参数会被封装成一个元组。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">sum_numbers</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    total <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">    <span class="token keyword">for</span> num <span class="token keyword">in</span> args<span class="token punctuation">:</span></span>
<span class="line">        total <span class="token operator">+=</span> num</span>
<span class="line">    <span class="token keyword">return</span> total</span>
<span class="line"></span>
<span class="line">result <span class="token operator">=</span> sum_numbers<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong><code>**kwargs</code></strong><code>**kwargs</code> 用于接收任意数量的关键字参数，这些参数会被封装成一个字典。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">print_info</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>value<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">print_info<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> city<span class="token operator">=</span><span class="token string">&quot;New York&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五-参数组合" tabindex="-1"><a class="header-anchor" href="#五-参数组合"><span>（五）参数组合</span></a></h3><p>在函数定义中，可同时使用位置参数、默认参数、<code>*args</code> 和 <code>**kwargs</code>，但它们的顺序必须是：位置参数、默认参数、<code>*args</code>、<code>**kwargs</code>。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">example_function</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;a: </span><span class="token interpolation"><span class="token punctuation">{</span>a<span class="token punctuation">}</span></span><span class="token string">, b: </span><span class="token interpolation"><span class="token punctuation">{</span>b<span class="token punctuation">}</span></span><span class="token string">, c: </span><span class="token interpolation"><span class="token punctuation">{</span>c<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;args: </span><span class="token interpolation"><span class="token punctuation">{</span>args<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;kwargs: </span><span class="token interpolation"><span class="token punctuation">{</span>kwargs<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">example_function<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、函数文档字符串" tabindex="-1"><a class="header-anchor" href="#四、函数文档字符串"><span>四、函数文档字符串</span></a></h2><h3 id="一-作用" tabindex="-1"><a class="header-anchor" href="#一-作用"><span>（一）作用</span></a></h3><p>函数文档字符串用于对函数的功能、参数、返回值等信息进行描述，方便其他开发者理解和使用函数。</p><h3 id="二-示例-1" tabindex="-1"><a class="header-anchor" href="#二-示例-1"><span>（二）示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">calculate_area</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token triple-quoted-string string">&quot;&quot;&quot;</span>
<span class="line">    此函数用于计算圆的面积。</span>
<span class="line"></span>
<span class="line">    参数:</span>
<span class="line">    radius (float): 圆的半径。</span>
<span class="line"></span>
<span class="line">    返回:</span>
<span class="line">    float: 圆的面积。</span>
<span class="line">    &quot;&quot;&quot;</span></span>
<span class="line">    <span class="token keyword">import</span> math</span>
<span class="line">    <span class="token keyword">return</span> math<span class="token punctuation">.</span>pi <span class="token operator">*</span> radius <span class="token operator">**</span> <span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可通过 <code>__doc__</code> 属性访问函数的文档字符串。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>calculate_area<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="五、函数作用域" tabindex="-1"><a class="header-anchor" href="#五、函数作用域"><span>五、函数作用域</span></a></h2><h3 id="一-局部变量" tabindex="-1"><a class="header-anchor" href="#一-局部变量"><span>（一）局部变量</span></a></h3><p>在函数内部定义的变量属于局部变量，其作用域仅限于函数内部。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">def</span> <span class="token function">test_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    local_variable <span class="token operator">=</span> <span class="token number">10</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>local_variable<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">test_function<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 下面这行代码会报错，因为 local_variable 是局部变量</span></span>
<span class="line"><span class="token comment"># print(local_variable)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-全局变量" tabindex="-1"><a class="header-anchor" href="#二-全局变量"><span>（二）全局变量</span></a></h3><p>在函数外部定义的变量属于全局变量，在函数内部可以访问全局变量，但若要在函数内部修改全局变量的值，需使用 <code>global</code> 关键字。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">global_variable <span class="token operator">=</span> <span class="token number">20</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">modify_global</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">global</span> global_variable</span>
<span class="line">    global_variable <span class="token operator">=</span> <span class="token number">30</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>global_variable<span class="token punctuation">)</span></span>
<span class="line">modify_global<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>global_variable<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、匿名函数-lambda-函数" tabindex="-1"><a class="header-anchor" href="#六、匿名函数-lambda-函数"><span>六、匿名函数（lambda 函数）</span></a></h2><h3 id="一-基本语法-1" tabindex="-1"><a class="header-anchor" href="#一-基本语法-1"><span>（一）基本语法</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">lambda</span> arguments<span class="token punctuation">:</span> expression</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><code>lambda</code> 函数是一种小型的、匿名的函数，可接收任意数量的参数，但只能有一个表达式。</p><h3 id="二-示例-2" tabindex="-1"><a class="header-anchor" href="#二-示例-2"><span>（二）示例</span></a></h3><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">add <span class="token operator">=</span> <span class="token keyword">lambda</span> a<span class="token punctuation">,</span> b<span class="token punctuation">:</span> a <span class="token operator">+</span> b</span>
<span class="line">result <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>lambda</code> 函数常用于需要一个简单函数的场合，比如作为 <code>sorted()</code>、<code>map()</code>、<code>filter()</code> 等函数的参数。</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line">squared_numbers <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> numbers<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>squared_numbers<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,55)]))}const c=s(t,[["render",l]]),r=JSON.parse('{"path":"/tech/py/4.html","title":"Python 函数：定义、调用与参数传递","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、函数定义","slug":"一、函数定义","link":"#一、函数定义","children":[{"level":3,"title":"（一）基本语法","slug":"一-基本语法","link":"#一-基本语法","children":[]},{"level":3,"title":"（二）示例","slug":"二-示例","link":"#二-示例","children":[]}]},{"level":2,"title":"二、函数调用","slug":"二、函数调用","link":"#二、函数调用","children":[{"level":3,"title":"（一）调用方式","slug":"一-调用方式","link":"#一-调用方式","children":[]},{"level":3,"title":"（二）返回值处理","slug":"二-返回值处理","link":"#二-返回值处理","children":[]}]},{"level":2,"title":"三、参数传递","slug":"三、参数传递","link":"#三、参数传递","children":[{"level":3,"title":"（一）位置参数","slug":"一-位置参数","link":"#一-位置参数","children":[]},{"level":3,"title":"（二）关键字参数","slug":"二-关键字参数","link":"#二-关键字参数","children":[]},{"level":3,"title":"（三）默认参数","slug":"三-默认参数","link":"#三-默认参数","children":[]},{"level":3,"title":"（四）可变参数","slug":"四-可变参数","link":"#四-可变参数","children":[]},{"level":3,"title":"（五）参数组合","slug":"五-参数组合","link":"#五-参数组合","children":[]}]},{"level":2,"title":"四、函数文档字符串","slug":"四、函数文档字符串","link":"#四、函数文档字符串","children":[{"level":3,"title":"（一）作用","slug":"一-作用","link":"#一-作用","children":[]},{"level":3,"title":"（二）示例","slug":"二-示例-1","link":"#二-示例-1","children":[]}]},{"level":2,"title":"五、函数作用域","slug":"五、函数作用域","link":"#五、函数作用域","children":[{"level":3,"title":"（一）局部变量","slug":"一-局部变量","link":"#一-局部变量","children":[]},{"level":3,"title":"（二）全局变量","slug":"二-全局变量","link":"#二-全局变量","children":[]}]},{"level":2,"title":"六、匿名函数（lambda 函数）","slug":"六、匿名函数-lambda-函数","link":"#六、匿名函数-lambda-函数","children":[{"level":3,"title":"（一）基本语法","slug":"一-基本语法-1","link":"#一-基本语法-1","children":[]},{"level":3,"title":"（二）示例","slug":"二-示例-2","link":"#二-示例-2","children":[]}]}],"git":{},"filePathRelative":"tech/py/4.md"}');export{c as comp,r as data};
