import{_ as s,c as a,a as e,o as l}from"./app-CEvnTgAb.js";const i={};function p(t,n){return l(),a("div",null,n[0]||(n[0]=[e(`<h1 id="python-模块与包-组织与管理代码" tabindex="-1"><a class="header-anchor" href="#python-模块与包-组织与管理代码"><span>Python 模块与包：组织与管理代码</span></a></h1><h2 id="一、模块基础" tabindex="-1"><a class="header-anchor" href="#一、模块基础"><span>一、模块基础</span></a></h2><h3 id="一-模块定义与作用" tabindex="-1"><a class="header-anchor" href="#一-模块定义与作用"><span>（一）模块定义与作用</span></a></h3><ul><li>模块是一个包含 Python 定义和语句的文件，文件名就是模块名加上 <code>.py</code> 后缀。例如，<code>math.py</code> 文件就是一个模块，模块可以将相关的代码组织在一起，提高代码的可维护性和复用性。</li></ul><h3 id="二-导入模块" tabindex="-1"><a class="header-anchor" href="#二-导入模块"><span>（二）导入模块</span></a></h3><ol><li><strong><code>import</code> 语句</strong></li></ol><ul><li>基本语法：<code>import module_name</code></li><li>示例：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> math</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 使用 math 模块的 sqrt 函数计算 16 的平方根</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解释：使用 <code>import</code> 语句导入整个模块后，要使用模块中的函数或变量，需要通过 <code>模块名.函数名</code> 或 <code>模块名.变量名</code> 的方式调用。</li></ul><ol start="2"><li><strong><code>from...import</code> 语句</strong></li></ol><ul><li>基本语法：<code>from module_name import function_name, variable_name</code></li><li>示例：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> math <span class="token keyword">import</span> pi</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>pi<span class="token punctuation">)</span>  <span class="token comment"># 直接使用导入的变量 pi</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解释：这种方式只导入模块中指定的函数或变量，使用时无需加模块名前缀。</li></ul><ol start="3"><li><strong><code>from...import *</code> 语句</strong></li></ol><ul><li>基本语法：<code>from module_name import *</code></li><li>示例：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> math <span class="token keyword">import</span> <span class="token operator">*</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 可以直接使用 math 模块中的所有函数</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解释：导入模块中的所有函数和变量，但这种方式可能会导致命名冲突，不建议在大型项目中使用。</li></ul><ol start="4"><li><strong>为模块或导入项指定别名</strong></li></ol><ul><li>基本语法：<code>import module_name as alias</code> 或 <code>from module_name import function_name as alias</code></li><li>示例：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> math <span class="token keyword">as</span> m</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> math <span class="token keyword">import</span> sqrt <span class="token keyword">as</span> square_root</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>square_root<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>解释：使用别名可以简化代码，避免命名冲突。</li></ul><h3 id="三-模块搜索路径" tabindex="-1"><a class="header-anchor" href="#三-模块搜索路径"><span>（三）模块搜索路径</span></a></h3><ul><li>Python 在导入模块时，会按照以下顺序搜索模块：</li></ul><ol><li>内置模块：Python 解释器自带的模块，如 <code>math</code>、<code>sys</code> 等。</li><li>当前目录：即运行 Python 脚本所在的目录。</li><li>环境变量 <code>PYTHONPATH</code> 中指定的目录。</li><li>Python 安装目录下的 <code>site-packages</code> 目录。</li></ol><ul><li>可以通过 <code>sys.path</code> 查看模块搜索路径：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> sys</span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、自定义模块" tabindex="-1"><a class="header-anchor" href="#二、自定义模块"><span>二、自定义模块</span></a></h2><h3 id="一-创建模块" tabindex="-1"><a class="header-anchor" href="#一-创建模块"><span>（一）创建模块</span></a></h3><ul><li>创建一个 <code>.py</code> 文件，在文件中定义函数、类、变量等。例如，创建一个 <code>my_module.py</code> 文件：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># my_module.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line"></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">subtract</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">-</span> b</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-使用自定义模块" tabindex="-1"><a class="header-anchor" href="#二-使用自定义模块"><span>（二）使用自定义模块</span></a></h3><ul><li>在另一个 Python 文件中导入并使用自定义模块：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> my_module</span>
<span class="line">result <span class="token operator">=</span> my_module<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-模块的-name-属性" tabindex="-1"><a class="header-anchor" href="#三-模块的-name-属性"><span>（三）模块的 <code>__name__</code> 属性</span></a></h3><ul><li>每个模块都有一个 <code>__name__</code> 属性，当模块作为脚本直接运行时，<code>__name__</code> 属性的值为 <code>&#39;__main__&#39;</code>；当模块被导入时，<code>__name__</code> 属性的值为模块名。</li><li>可以利用 <code>__name__</code> 属性来区分模块是直接运行还是被导入：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># my_module.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> a <span class="token operator">+</span> b</span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    result <span class="token operator">=</span> add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、包的概念与使用" tabindex="-1"><a class="header-anchor" href="#三、包的概念与使用"><span>三、包的概念与使用</span></a></h2><h3 id="一-包的定义" tabindex="-1"><a class="header-anchor" href="#一-包的定义"><span>（一）包的定义</span></a></h3><ul><li>包是一种组织 Python 模块的方式，它是一个包含多个模块的目录，该目录下必须包含一个 <code>__init__.py</code> 文件（Python 3.3 之后，<code>__init__.py</code> 文件不是必需的，但为了兼容性，建议保留）。</li></ul><h3 id="二-创建包" tabindex="-1"><a class="header-anchor" href="#二-创建包"><span>（二）创建包</span></a></h3><ul><li>创建一个目录作为包名，在该目录下创建 <code>__init__.py</code> 文件和其他模块文件。例如，创建一个名为 <code>my_package</code> 的包：</li></ul><div class="language-plaintext line-numbers-mode" data-highlighter="prismjs" data-ext="plaintext"><pre><code><span class="line">my_package/</span>
<span class="line">    __init__.py</span>
<span class="line">    module1.py</span>
<span class="line">    module2.py</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>module1.py</code> 内容示例：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># module1.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;Hello from module1!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>module2.py</code> 内容示例：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># module2.py</span></span>
<span class="line"><span class="token keyword">def</span> <span class="token function">farewell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;Goodbye from module2!&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三-导入包和包中的模块" tabindex="-1"><a class="header-anchor" href="#三-导入包和包中的模块"><span>（三）导入包和包中的模块</span></a></h3><ol><li><strong>导入整个包</strong></li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> my_package</span>
<span class="line">result <span class="token operator">=</span> my_package<span class="token punctuation">.</span>module1<span class="token punctuation">.</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>从包中导入特定模块</strong></li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> my_package <span class="token keyword">import</span> module2</span>
<span class="line">result <span class="token operator">=</span> module2<span class="token punctuation">.</span>farewell<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>从包中的模块导入特定函数或变量</strong></li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> my_package<span class="token punctuation">.</span>module1 <span class="token keyword">import</span> greet</span>
<span class="line">result <span class="token operator">=</span> greet<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四-init-py-文件的作用" tabindex="-1"><a class="header-anchor" href="#四-init-py-文件的作用"><span>（四）<code>__init__.py</code> 文件的作用</span></a></h3><ul><li><code>__init__.py</code> 文件可以为空，也可以包含初始化代码或导入语句。例如，在 <code>__init__.py</code> 中导入 <code>module1</code> 和 <code>module2</code> 中的函数：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># __init__.py</span></span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>module1 <span class="token keyword">import</span> greet</span>
<span class="line"><span class="token keyword">from</span> <span class="token punctuation">.</span>module2 <span class="token keyword">import</span> farewell</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>这样在导入包时，可以直接使用这些函数：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">import</span> my_package</span>
<span class="line">result1 <span class="token operator">=</span> my_package<span class="token punctuation">.</span>greet<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">result2 <span class="token operator">=</span> my_package<span class="token punctuation">.</span>farewell<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、模块的发布与安装" tabindex="-1"><a class="header-anchor" href="#四、模块的发布与安装"><span>四、模块的发布与安装</span></a></h2><h3 id="一-使用-setuptools-打包模块" tabindex="-1"><a class="header-anchor" href="#一-使用-setuptools-打包模块"><span>（一）使用 <code>setuptools</code> 打包模块</span></a></h3><ul><li><code>setuptools</code> 是 Python 中常用的打包工具，以下是一个简单的 <code>setup.py</code> 文件示例：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">from</span> setuptools <span class="token keyword">import</span> setup<span class="token punctuation">,</span> find_packages</span>
<span class="line"></span>
<span class="line">setup<span class="token punctuation">(</span></span>
<span class="line">    name<span class="token operator">=</span><span class="token string">&#39;my_package&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    version<span class="token operator">=</span><span class="token string">&#39;0.1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    packages<span class="token operator">=</span>find_packages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-打包模块" tabindex="-1"><a class="header-anchor" href="#二-打包模块"><span>（二）打包模块</span></a></h3><ul><li>在包含 <code>setup.py</code> 文件的目录下，执行以下命令进行打包：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">python setup.py sdist bdist_wheel</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>这将生成源代码分发包（<code>.tar.gz</code> 文件）和二进制分发包（<code>.whl</code> 文件）。</li></ul><h3 id="三-安装模块" tabindex="-1"><a class="header-anchor" href="#三-安装模块"><span>（三）安装模块</span></a></h3><ul><li>可以使用 <code>pip</code> 安装打包好的模块：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pip <span class="token function">install</span> dist/my_package-0.1.tar.gz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>或者使用 <code>.whl</code> 文件安装：</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">pip <span class="token function">install</span> dist/my_package-0.1-py3-none-any.whl</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div>`,71)]))}const c=s(i,[["render",p]]),d=JSON.parse('{"path":"/tech/py/5.html","title":"Python 模块与包：组织与管理代码","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、模块基础","slug":"一、模块基础","link":"#一、模块基础","children":[{"level":3,"title":"（一）模块定义与作用","slug":"一-模块定义与作用","link":"#一-模块定义与作用","children":[]},{"level":3,"title":"（二）导入模块","slug":"二-导入模块","link":"#二-导入模块","children":[]},{"level":3,"title":"（三）模块搜索路径","slug":"三-模块搜索路径","link":"#三-模块搜索路径","children":[]}]},{"level":2,"title":"二、自定义模块","slug":"二、自定义模块","link":"#二、自定义模块","children":[{"level":3,"title":"（一）创建模块","slug":"一-创建模块","link":"#一-创建模块","children":[]},{"level":3,"title":"（二）使用自定义模块","slug":"二-使用自定义模块","link":"#二-使用自定义模块","children":[]},{"level":3,"title":"（三）模块的 __name__ 属性","slug":"三-模块的-name-属性","link":"#三-模块的-name-属性","children":[]}]},{"level":2,"title":"三、包的概念与使用","slug":"三、包的概念与使用","link":"#三、包的概念与使用","children":[{"level":3,"title":"（一）包的定义","slug":"一-包的定义","link":"#一-包的定义","children":[]},{"level":3,"title":"（二）创建包","slug":"二-创建包","link":"#二-创建包","children":[]},{"level":3,"title":"（三）导入包和包中的模块","slug":"三-导入包和包中的模块","link":"#三-导入包和包中的模块","children":[]},{"level":3,"title":"（四）__init__.py 文件的作用","slug":"四-init-py-文件的作用","link":"#四-init-py-文件的作用","children":[]}]},{"level":2,"title":"四、模块的发布与安装","slug":"四、模块的发布与安装","link":"#四、模块的发布与安装","children":[{"level":3,"title":"（一）使用 setuptools 打包模块","slug":"一-使用-setuptools-打包模块","link":"#一-使用-setuptools-打包模块","children":[]},{"level":3,"title":"（二）打包模块","slug":"二-打包模块","link":"#二-打包模块","children":[]},{"level":3,"title":"（三）安装模块","slug":"三-安装模块","link":"#三-安装模块","children":[]}]}],"git":{},"filePathRelative":"tech/py/5.md"}');export{c as comp,d as data};
