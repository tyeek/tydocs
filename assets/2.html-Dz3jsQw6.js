import{_ as s,c as a,a as e,o as t}from"./app-BA05owTb.js";const p={};function l(i,n){return t(),a("div",null,n[0]||(n[0]=[e(`<h1 id="python-数据结构-列表、元组、字典与集合" tabindex="-1"><a class="header-anchor" href="#python-数据结构-列表、元组、字典与集合"><span>Python 数据结构：列表、元组、字典与集合</span></a></h1><h2 id="一、列表-list" tabindex="-1"><a class="header-anchor" href="#一、列表-list"><span>一、列表（List）</span></a></h2><h3 id="一-列表定义与创建" tabindex="-1"><a class="header-anchor" href="#一-列表定义与创建"><span>（一）列表定义与创建</span></a></h3><ul><li>列表是一种可变的、有序的数据结构，可容纳不同类型的元素。</li><li>创建方式：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 空列表</span></span>
<span class="line">empty_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment"># 包含元素的列表</span></span>
<span class="line">mixed_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">3.14</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-列表操作" tabindex="-1"><a class="header-anchor" href="#二-列表操作"><span>（二）列表操作</span></a></h3><ol><li><strong>访问元素</strong>：通过索引访问，索引从 0 开始。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>切片操作</strong>：获取列表的子列表。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 [20, 30]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li><strong>修改元素</strong>：可直接通过索引修改列表中的元素。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_list<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">35</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [10, 20, 35, 40]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>添加元素</strong></li></ol><ul><li><code>append()</code>：在列表末尾添加一个元素。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [10, 20, 35, 40, 50]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>extend()</code>：将一个可迭代对象的元素添加到列表末尾。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">new_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">]</span></span>
<span class="line">my_list<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>new_list<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [10, 20, 35, 40, 50, 60, 70]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>insert()</code>：在指定位置插入元素。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_list<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [10, 20, 25, 35, 40, 50, 60, 70]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>删除元素</strong></li></ol><ul><li><code>remove()</code>：删除指定值的第一个匹配项。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_list<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [10, 20, 35, 40, 50, 60, 70]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>pop()</code>：删除指定索引的元素，若不指定索引则删除最后一个元素。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">removed <span class="token operator">=</span> my_list<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>removed<span class="token punctuation">)</span>  <span class="token comment"># 输出 35</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [10, 20, 40, 50, 60, 70]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>del</code>：删除指定索引的元素。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">del</span> my_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [20, 40, 50, 60, 70]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li><strong>列表排序</strong></li></ol><ul><li><code>sort()</code>：对列表进行原地排序。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [20, 40, 50, 60, 70]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>sorted()</code>：返回一个新的排序后的列表，原列表不变。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">new_sorted_list <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>my_list<span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>new_sorted_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [70, 60, 50, 40, 20]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li><strong>列表反转</strong></li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_list<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>  <span class="token comment"># 输出 [70, 60, 50, 40, 20]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、元组-tuple" tabindex="-1"><a class="header-anchor" href="#二、元组-tuple"><span>二、元组（Tuple）</span></a></h2><h3 id="一-元组定义与创建" tabindex="-1"><a class="header-anchor" href="#一-元组定义与创建"><span>（一）元组定义与创建</span></a></h3><ul><li>元组是一种不可变的、有序的数据结构，可容纳不同类型的元素。</li><li>创建方式：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 空元组</span></span>
<span class="line">empty_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 包含元素的元组</span></span>
<span class="line">single_element_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span>  <span class="token comment"># 单个元素的元组需要加逗号</span></span>
<span class="line">mixed_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-元组操作" tabindex="-1"><a class="header-anchor" href="#二-元组操作"><span>（二）元组操作</span></a></h3><ol><li><strong>访问元素</strong>：通过索引访问，索引从 0 开始。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_tuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 200</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>切片操作</strong>：获取元组的子元组。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 (100, 200)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li><strong>元组不可修改</strong>：试图修改元组元素会引发错误。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 以下代码会报错</span></span>
<span class="line"><span class="token comment"># my_tuple[1] = 250</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、字典-dictionary" tabindex="-1"><a class="header-anchor" href="#三、字典-dictionary"><span>三、字典（Dictionary）</span></a></h2><h3 id="一-字典定义与创建" tabindex="-1"><a class="header-anchor" href="#一-字典定义与创建"><span>（一）字典定义与创建</span></a></h3><ul><li>字典是一种可变的、无序的数据结构，由键值对组成，键必须是唯一的且不可变。</li><li>创建方式：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 空字典</span></span>
<span class="line">empty_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment"># 包含元素的字典</span></span>
<span class="line">person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token string">&quot;name&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">25</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token string">&quot;city&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;New York&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-字典操作" tabindex="-1"><a class="header-anchor" href="#二-字典操作"><span>（二）字典操作</span></a></h3><ol><li><strong>访问元素</strong>：通过键访问对应的值。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">[</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 Alice</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="2"><li><strong>修改元素</strong>：通过键修改对应的值。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">person<span class="token punctuation">[</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">26</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>  <span class="token comment"># 输出 {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 26, &#39;city&#39;: &#39;New York&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li><strong>添加元素</strong>：直接使用新的键值对赋值。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">person<span class="token punctuation">[</span><span class="token string">&quot;job&quot;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;Engineer&quot;</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>  <span class="token comment"># 输出 {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 26, &#39;city&#39;: &#39;New York&#39;, &#39;job&#39;: &#39;Engineer&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li><strong>删除元素</strong>：使用 <code>del</code> 关键字删除指定键的键值对。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">del</span> person<span class="token punctuation">[</span><span class="token string">&quot;city&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>  <span class="token comment"># 输出 {&#39;name&#39;: &#39;Alice&#39;, &#39;age&#39;: 26, &#39;job&#39;: &#39;Engineer&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li><strong>获取所有键和值</strong></li></ol><ul><li><code>keys()</code>：返回字典中所有键的视图。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 dict_keys([&#39;name&#39;, &#39;age&#39;, &#39;job&#39;])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>values()</code>：返回字典中所有值的视图。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 dict_values([&#39;Alice&#39;, 26, &#39;Engineer&#39;])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>items()</code>：返回字典中所有键值对的视图。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 输出 dict_items([(&#39;name&#39;, &#39;Alice&#39;), (&#39;age&#39;, 26), (&#39;job&#39;, &#39;Engineer&#39;)])</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="6"><li><strong>检查键是否存在</strong>：使用 <code>in</code> 关键字。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> person<span class="token punctuation">)</span>  <span class="token comment"># 输出 True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="四、集合-set" tabindex="-1"><a class="header-anchor" href="#四、集合-set"><span>四、集合（Set）</span></a></h2><h3 id="一-集合定义与创建" tabindex="-1"><a class="header-anchor" href="#一-集合定义与创建"><span>（一）集合定义与创建</span></a></h3><ul><li>集合是一种可变的、无序且元素唯一的数据结构。</li><li>创建方式：</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line"><span class="token comment"># 空集合</span></span>
<span class="line">empty_set <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># 包含元素的集合</span></span>
<span class="line">my_set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>  <span class="token comment"># 重复元素会被自动去除</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span>  <span class="token comment"># 输出 {1, 2, 3}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二-集合操作" tabindex="-1"><a class="header-anchor" href="#二-集合操作"><span>（二）集合操作</span></a></h3><ol><li><strong>添加元素</strong>：使用 <code>add()</code> 方法。</li></ol><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span>  <span class="token comment"># 输出 {1, 2, 3, 4}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>删除元素</strong></li></ol><ul><li><code>remove()</code>：删除指定元素，若元素不存在会引发错误。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_set<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>my_set<span class="token punctuation">)</span>  <span class="token comment"># 输出 {1, 2, 4}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>discard()</code>：删除指定元素，若元素不存在不会引发错误。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">my_set<span class="token punctuation">.</span>discard<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol start="3"><li><strong>集合运算</strong></li></ol><ul><li><strong>并集</strong>：使用 <code>union()</code> 方法或 <code>|</code> 运算符。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">set1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span></span>
<span class="line">set2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span></span>
<span class="line">union_set <span class="token operator">=</span> set1<span class="token punctuation">.</span>union<span class="token punctuation">(</span>set2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>union_set<span class="token punctuation">)</span>  <span class="token comment"># 输出 {1, 2, 3, 4, 5}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>交集</strong>：使用 <code>intersection()</code> 方法或 <code>&amp;</code> 运算符。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">intersection_set <span class="token operator">=</span> set1<span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>intersection_set<span class="token punctuation">)</span>  <span class="token comment"># 输出 {3}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>差集</strong>：使用 <code>difference()</code> 方法或 <code>-</code> 运算符。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">difference_set <span class="token operator">=</span> set1<span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>difference_set<span class="token punctuation">)</span>  <span class="token comment"># 输出 {1, 2}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>对称差集</strong>：使用 <code>symmetric_difference()</code> 方法或 <code>^</code> 运算符。</li></ul><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py"><pre><code><span class="line">symmetric_difference_set <span class="token operator">=</span> set1<span class="token punctuation">.</span>symmetric_difference<span class="token punctuation">(</span>set2<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span>symmetric_difference_set<span class="token punctuation">)</span>  <span class="token comment"># 输出 {1, 2, 4, 5}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div>`,87)]))}const o=s(p,[["render",l]]),r=JSON.parse('{"path":"/tech/py/2.html","title":"Python 数据结构：列表、元组、字典与集合","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、列表（List）","slug":"一、列表-list","link":"#一、列表-list","children":[{"level":3,"title":"（一）列表定义与创建","slug":"一-列表定义与创建","link":"#一-列表定义与创建","children":[]},{"level":3,"title":"（二）列表操作","slug":"二-列表操作","link":"#二-列表操作","children":[]}]},{"level":2,"title":"二、元组（Tuple）","slug":"二、元组-tuple","link":"#二、元组-tuple","children":[{"level":3,"title":"（一）元组定义与创建","slug":"一-元组定义与创建","link":"#一-元组定义与创建","children":[]},{"level":3,"title":"（二）元组操作","slug":"二-元组操作","link":"#二-元组操作","children":[]}]},{"level":2,"title":"三、字典（Dictionary）","slug":"三、字典-dictionary","link":"#三、字典-dictionary","children":[{"level":3,"title":"（一）字典定义与创建","slug":"一-字典定义与创建","link":"#一-字典定义与创建","children":[]},{"level":3,"title":"（二）字典操作","slug":"二-字典操作","link":"#二-字典操作","children":[]}]},{"level":2,"title":"四、集合（Set）","slug":"四、集合-set","link":"#四、集合-set","children":[{"level":3,"title":"（一）集合定义与创建","slug":"一-集合定义与创建","link":"#一-集合定义与创建","children":[]},{"level":3,"title":"（二）集合操作","slug":"二-集合操作","link":"#二-集合操作","children":[]}]}],"git":{},"filePathRelative":"tech/py/2.md"}');export{o as comp,r as data};
